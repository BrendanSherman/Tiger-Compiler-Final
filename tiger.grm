/*
 * tiger.grm
 * Yacc (Bison) grammar specification file for Tiger compiler.
 * Author: Amittai Aviram - aviram@bc.edu.
 */

%{
#include <stdio.h>
#include "absyn.h"
#include "errormsg.h"
#include "symbol.h"
#include "util.h"
#include "y.tab.h"

A_Exp absyn_root;

int yylex();
void yyerror(char * s);

%}

%define api.location.type {E_Pos};

%union {
    int ival;
    string sval;
    A_Var var;
    A_Exp exp;
    A_ExpList exp_list;
    A_EField e_field;
    A_EFieldList e_field_list;
    A_Dec dec;
    A_DecList dec_list;
    A_Type type;
    A_TypeDec type_dec;
    A_TypeDecList type_dec_list;
    A_Field field;
    A_FieldList field_list;
    A_FunDec fun_dec;
    A_FunDecList fun_dec_list;
    A_ArrayPrefix array_prefix;
}

%token <sval> ID STRING
%token <ival> INT

%token
    COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK
    LBRACE RBRACE DOT
    PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
    AND OR ASSIGN
    ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
    BREAK NIL
    FUNCTION VAR TYPE

%type <var> simple_var field_var subscript_var var
%type <exp> var_exp call_exp op_exp seq_exp assign_exp
%type <exp> record_creation_exp array_creation_exp
%type <exp> if_exp if_else_exp while_exp for_exp let_exp exp program
%type <exp_list> arg_list_or_nothing arg_list exp_list
%type <e_field> e_field
%type <e_field_list> e_field_list_or_nothing e_field_list
%type <dec_list> dec_list
%type <dec> var_dec dec
%type <type_dec> type_dec
%type <type_dec_list> type_dec_list
%type <type> type_exp
%type <fun_dec> function_dec
%type <fun_dec_list> function_dec_list
%type <field> field
%type <field_list> field_list_or_nothing field_list
%type <array_prefix> array_prefix
 
%nonassoc ID OF
%nonassoc FUNCTION VAR TYPE LBRACE LBRACK
%nonassoc WHILE FOR DO
%nonassoc THEN
%nonassoc ELSE
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GE GT
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS

%start program

%%

program: exp { $$ = $1; absyn_root = $$; }

exp: var_exp { $$ = $1; }
    | NIL { $$ = make_A_NilExp(@1); }
    | INT { $$ = make_A_IntExp(@1, $1); }
    | STRING { $$ = make_A_StringExp(@1, $1); }
    | MINUS exp %prec UMINUS { $$ = make_A_OpExp(@1, A_MINUS_OP, make_A_IntExp(@1, 0), $2); }
    | call_exp { $$ = $1; }
    | op_exp { $$ = $1; }
    | seq_exp { $$ = $1; }
    | assign_exp { $$ = $1; }
    | record_creation_exp { $$ = $1; }
    | array_creation_exp { $$ = $1; }
    | if_exp { $$ = $1; }
    | if_else_exp { $$ = $1; }
    | while_exp { $$ = $1; }
    | for_exp { $$ = $1; }
    | BREAK { $$ = make_A_BreakExp(@1); }
    | let_exp { $$ = $1; }
    ;

var_exp: var { $$ = make_A_VarExp(@1, $1); }
    ;

var: simple_var { $$ = $1; }
    | field_var { $$ = $1; }
    | subscript_var { $$ = $1; }
    ;

simple_var: ID { $$ = make_A_SimpleVar(@1, make_S_Symbol($1)); }
    ;

field_var: var DOT ID { $$ = make_A_FieldVar(@1, $1, make_S_Symbol($3)); }
    ;

subscript_var: var LBRACK exp RBRACK { $$ = make_A_SubscriptVar(@1, $1, $3); }
    | array_prefix { $$ = make_A_SubscriptVar(@1, make_A_SimpleVar(@1, $1->name), $1->index); }
    ;

array_prefix: ID LBRACK exp RBRACK { $$ = make_A_ArrayPrefix(@1, make_S_Symbol($1), $3); }

call_exp: ID LPAREN arg_list_or_nothing RPAREN { $$ = make_A_CallExp(@1, make_S_Symbol($1), $3); }
    ;

arg_list_or_nothing: arg_list { $$ = $1; }
    | { $$ = NULL; }
    ;

arg_list: exp COMMA arg_list { $$ = make_A_ExpList($1, $3); }
    | exp { $$ = make_A_ExpList($1, NULL); }
    ;

op_exp: exp PLUS exp { $$ = make_A_OpExp(@1, A_PLUS_OP, $1, $3); }
    | exp MINUS exp { $$ = make_A_OpExp(@1, A_MINUS_OP, $1, $3); }
    | exp TIMES exp { $$ = make_A_OpExp(@1, A_TIMES_OP, $1, $3); }
    | exp DIVIDE exp { $$ = make_A_OpExp(@1, A_DIVIDE_OP, $1, $3); }
    | exp EQ exp { $$ = make_A_OpExp(@1, A_EQ_OP, $1, $3); }
    | exp NEQ exp { $$ = make_A_OpExp(@1, A_NEQ_OP, $1, $3); }
    | exp LT exp { $$ = make_A_OpExp(@1, A_LT_OP, $1, $3); }
    | exp LE exp { $$ = make_A_OpExp(@1, A_LE_OP, $1, $3); }
    | exp GE exp { $$ = make_A_OpExp(@1, A_GE_OP, $1, $3); }
    | exp GT exp { $$ = make_A_OpExp(@1, A_GT_OP, $1, $3); }
    | exp AND exp { $$ = make_A_OpExp(@1, A_AND_OP, $1, $3); }
    | exp OR exp { $$ = make_A_OpExp(@1, A_OR_OP, $1, $3); }
    ;

record_creation_exp: ID LBRACE e_field_list_or_nothing RBRACE {
            $$ = make_A_RecordExp(@1, make_S_Symbol($1), $3);
        }
    ;

e_field_list_or_nothing: e_field_list { $$ = $1; }
    | { $$ = NULL; }
    ;

e_field_list: e_field COMMA e_field_list { $$ = make_A_EFieldList($1, $3); }
    | e_field { $$ = make_A_EFieldList($1, NULL); }
    ;

e_field: ID EQ exp { $$ = make_A_EField(make_S_Symbol($1), $3); }
    ;

array_creation_exp: array_prefix OF exp {
            $$ = make_A_ArrayExp(@1, $1->name, $1->index, $3);
        }
    ;

seq_exp: LPAREN exp_list RPAREN { $$ = make_A_SeqExp(@1, $2); }
    ;

exp_list: exp SEMICOLON exp_list { $$ = make_A_ExpList($1, $3); }
    | exp { $$ = make_A_ExpList($1, NULL); }
    | { $$ = NULL; }
    ;

assign_exp: var ASSIGN exp { $$ = make_A_AssignExp(@1, $1, $3); }
    ;

if_exp: IF exp THEN exp { $$ = make_A_IfExp(@1, $2, $4, NULL); }
    ;

if_else_exp: IF exp THEN exp ELSE exp { $$ = make_A_IfExp(@1, $2, $4, $6); }
    ;

while_exp: WHILE exp DO exp { $$ = make_A_WhileExp(@1, $2, $4); }
    ;

for_exp: FOR ID ASSIGN exp TO exp DO exp {
            $$ = make_A_ForExp(@1, make_S_Symbol($2), $4, $6, $8);
        }
    ;

let_exp: LET dec_list IN exp_list END {
            $$ = make_A_LetExp(@1, $2, make_A_SeqExp(@4, $4));
        }
    ;

dec_list: dec dec_list { $$ = make_A_DecList($1, $2); }
    | { $$ = NULL; }
    ;

dec: type_dec_list { $$ = make_A_TypeDecGroup(@1, $1); }
    | var_dec { $$ = $1; }
    | function_dec_list { $$ = make_A_FunctionDecGroup(@1, $1); }
    ;

type_dec_list: type_dec type_dec_list %prec TYPE {
            $$ = make_A_TypeDecList($1, $2);
        }
    | type_dec %prec ID { $$ = make_A_TypeDecList($1, NULL); }
    ;

type_dec: TYPE ID EQ type_exp {
            $$ = make_A_TypeDec(make_S_Symbol($2), $4);
        }
    ;

// Appel: type, A_Type
type_exp: ID { $$ = make_A_NameType(@1, make_S_Symbol($1)); }
    | LBRACE field_list_or_nothing RBRACE { $$ = make_A_RecordType(@1, $2); }
    | ARRAY OF ID { $$ = make_A_ArrayType(@1, make_S_Symbol($3)); }
    ;

var_dec: VAR ID ASSIGN exp { $$ = make_A_VarDec(@1, make_S_Symbol($2), NULL, $4); }
    | VAR ID COLON ID ASSIGN exp {
            $$ = make_A_VarDec(@1, make_S_Symbol($2), make_S_Symbol($4), $6); }
    ;

function_dec_list: function_dec function_dec_list %prec FUNCTION {
            $$ = make_A_FunDecList($1, $2); }
    | function_dec %prec ID { $$ = make_A_FunDecList($1, NULL); }
    ;

function_dec: FUNCTION ID LPAREN field_list_or_nothing RPAREN EQ exp  {
            $$ = make_A_FunDec(@1, make_S_Symbol($2), $4, NULL, $7);
        }
    | FUNCTION ID LPAREN field_list_or_nothing RPAREN COLON ID EQ exp  {
            $$ = make_A_FunDec(@1, make_S_Symbol($2), $4, make_S_Symbol($7), $9);
        }
    ;

field_list_or_nothing: field_list { $$ = $1; }
    |  { $$ = NULL; }
    ;

field_list: field COMMA field_list { $$ = make_A_FieldList($1, $3); }
    | field { $$ = make_A_FieldList($1, NULL); }
    ;

field: ID COLON ID { $$ = make_A_Field(@1, make_S_Symbol($1), make_S_Symbol($3)); }
    ;


%%

void yyerror(char *s) {
    EM_error(yylloc, "%s", s);
}

